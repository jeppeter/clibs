// this file is generated by program
#ifndef __PINGCAP_H_DB0F356DE42D03B030B243803FD3981E__
#define __PINGCAP_H_DB0F356DE42D03B030B243803FD3981E__

#include <win_ping.h>

#pragma warning(push)
#pragma warning(disable:4577)
#pragma warning(disable:4530)

#include <vector>
#pragma warning(pop)

#define   NONE_MODE         0
#define   READ_MODE         1
#define   WRITE_MODE        2
#define   NEXT_MODE         8
#define   START_MODE        16
#define   COMPLETE_MODE     0x8000000

class PingCap
{
public:
	PingCap(const char* ip,int timeout,int nextout,int times);
	virtual ~PingCap();
	int set_verbose(int verbose);
	int start();
	int restart();
	int get_mode();
	HANDLE get_read_evt();
	HANDLE get_write_evt();
	int get_expire();
	int get_next_expire();
	int complete_read_evt();
	int complete_write_evt();
	int send_ping();
	int read_ping(uint64_t& pval);
	int get_result(int idx,uint64_t& val);
	int get_mean_result(uint64_t& val);
private:
	void _print_result(const char* file, int line,uint64_t val);
	int _get_ping_type();
	void __release_resource();
	int __start_alloc();

private:
	void* m_sock;
	char* m_ip;
	int m_verbose;
	int m_pingtype;
	uint64_t m_expire;
	uint64_t m_nextstart;
	int m_times;
	int m_timeout;
	int m_nexttime;
	int m_reserve1;
	std::vector<uint64_t>* m_pingval;
};


#endif /* __PINGCAP_H_DB0F356DE42D03B030B243803FD3981E__ */
